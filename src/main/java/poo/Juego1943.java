/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package poo;
import com.entropyinteractive.*;  //jgame
import poo.Armas.ArmaBarco;
import poo.Armas.Escopeta;
import poo.Bonus.*;
import poo.Enemigos.*;
import java.awt.*;
import java.awt.event.*; //eventos
import javax.imageio.*; //imagenes
import java.awt.Graphics2D;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

public class Juego1943 extends JGame {

    private Date dInit = new Date();
    private Date dAhora;
    private int puntaje, nroNivel = 1;
    private static int puntajeMaximo = 0;
    private Fondo fondo;
    private Vector<GrupoAvionesHostiles> avioneshostiles;
    private Vector<GrupoAvionesRojos> avionesrojos;
    private Vector<Barco> barcos;
    private Vector<Bonus> bonus;
    private Vector<Municion> municionesP38, municionesHostiles, municionesAliadas;
    private P38 heroe;
    private String teclaActDesSonido, teclaActDesMusica, teclaPausar, teclaMovIzq, teclaMovDer, teclaMovArriba, teclaMovAbajo, teclaDisparar, teclaAtqEsp, teclaIniciar, pistaMusical;
    private final String ARCHIVO_CONFIGURACION1943 = "src\\main\\resources\\conf\\configuracion1943.properties";
    private final Font fuente = new Font("Calibri", Font.PLAIN, 16);
    private Boolean musicaActiva, sonidoActivo, juegoCorriendo = false, inicioJuego = true, gameOver = false, transicion = false;
    //control de tiempo entre niveles
    private float cronoNivel1 = 0, cronoNivel2 = 0, cronoAviones1 = 0, cronoAviones2 = 0, cronoAviones3 = 0, cronoAvionesRojos = 0, cronoBarcos = 0;

    public Juego1943() {
        super("1943: The Battle of Midway", 800, 600);
        try (FileInputStream fis = new FileInputStream(ARCHIVO_CONFIGURACION1943)) {
            Properties propiedades = new Properties();
            propiedades.load(fis);

            // Obtener los valores de las propiedades
            teclaActDesSonido = (String.valueOf(propiedades.getProperty("sonidoActivo")));
            teclaActDesMusica = (String.valueOf(propiedades.getProperty("musicaActiva")));
            pistaMusical = (String.valueOf(propiedades.getProperty("seleccionMusica")));
            teclaPausar = (String.valueOf(propiedades.getProperty("teclaPausar")));
            teclaMovIzq = (String.valueOf(propiedades.getProperty("teclaMovIzq")));
            teclaMovDer = (String.valueOf(propiedades.getProperty("teclaMovDer")));
            teclaMovArriba = (String.valueOf(propiedades.getProperty("teclaMovArriba")));
            teclaMovAbajo = (String.valueOf(propiedades.getProperty("teclaMovAbajo")));
            teclaDisparar = (String.valueOf(propiedades.getProperty("teclaDisparar")));
            teclaAtqEsp = (String.valueOf(propiedades.getProperty("teclaAtqEsp")));
            teclaIniciar = (String.valueOf(propiedades.getProperty("teclaIniciar")));

            //ventana.setState(Boolean.parseBoolean(propiedades.getProperty("ventana")));
            //pantallaCompleta.setState(Boolean.parseBoolean(propiedades.getProperty("pantallaCompleta")));
            //pantallaCompletaActiva = Boolean.parseBoolean (propiedades.getProperty("pantallaCompletaActiva"));*/

        } catch (IOException ex) {
            ex.printStackTrace();
            System.out.println("Error al cargar!");
        }
    }

    public void gameStartup() {
        System.out.println("Iniciando 1943: The Battle of Midway");
        cargarImagenes();
        puntaje = 0;
        fondo = new Fondo(Utilidades.getImagenNivel(0));
        fondo.setPosicion(8,-(int)fondo.getHeight()+getHeight());
        heroe = new P38();
        heroe.setPosicion(getWidth() / 2-10, getHeight() / 2+100);
        avioneshostiles = new Vector<>();
        avionesrojos = new Vector<>();
        barcos = new Vector<>();
        bonus = new Vector<>();
        municionesP38 = new Vector<>();
        municionesHostiles = new Vector<>();
        municionesAliadas = new Vector<>();
        spawnearAviones1();
        spawnearAvionesRojos();
    }

    public void spawnearAvionesRojos(){
        avionesrojos.add(new GrupoAvionesRojos(getHeight()));
    }

    public void spawnearAviones1(){
        avioneshostiles.add(new GrupoAvionesHostilesFormacion1(getHeight()));
    }

    public void spawnearAviones2(){
        avioneshostiles.add(new GrupoAvionesHostilesFormacion2(getHeight()));
    }

    public void spawnearAviones3(){
        avioneshostiles.add(new GrupoAvionesHostilesFormacion3(getHeight()));
    }

    public void spawnearBarcos() {
        Random random = new Random();
        int x = random.nextInt(801); // Genera un número aleatorio entre 0 y 800 (inclusive)
        int y = -50;
        barcos.add(new Barco(x, y, heroe));
    }


    public void gameUpdate(double delta) {

        chequearTeclas();

        if(juegoCorriendo && !gameOver){
            if(nroNivel == 1){
                cronoNivel1 += 1 % 0.02;
                cronoAviones1 += 1 % 0.02;
                cronoAviones2 += 1 % 0.02;
                cronoAviones3 += 1 % 0.02;
                cronoAvionesRojos += 1 % 0.02;
                cronoBarcos += 1 % 0.02;
                if((int)cronoAviones1 == 15){
                    spawnearAviones1();
                    cronoAviones1 = 0;
                }
                if((int)cronoAviones2 == 30){
                    spawnearAviones2();
                    cronoAviones2 = 0;
                }
                if((int)cronoAviones3 == 45){
                    spawnearAviones3();
                    cronoAviones3 = 0;
                }
                if((int)cronoAvionesRojos == 10){
                    spawnearAvionesRojos();
                    cronoAvionesRojos = 0;
                }
                if((int)cronoBarcos == 20){
                    spawnearBarcos();
                    cronoBarcos = 0;
                }
            } else if(nroNivel == 2){
                cronoNivel2 += 1 % 0.02;
                cronoAviones1 += 1 % 0.02;
                cronoAviones2 += 1 % 0.02;
                cronoAviones3 += 1 % 0.02;
                cronoAvionesRojos += 1 % 0.02;
                cronoBarcos += 1 % 0.02;
                if((int)cronoAviones1 == 15){
                    spawnearAviones1();
                    cronoAviones1 = 0;
                }
                if((int)cronoAviones2 == 30){
                    spawnearAviones2();
                    cronoAviones2 = 0;
                }
                if((int)cronoAviones3 == 45){
                    spawnearAviones3();
                    cronoAviones3 = 0;
                }
                if((int)cronoAvionesRojos == 10){
                    spawnearAvionesRojos();
                    cronoAvionesRojos = 0;
                }
                if((int)cronoBarcos == 20){
                    spawnearBarcos();
                    cronoBarcos = 0;
                }
            }
            actualizarObjetos();
            chequearColisiones();
            fondo.setY((int)fondo.getY()+1);
        }

        if ((int)cronoNivel1 == 180 && nroNivel == 1){
            transicion = true;
            juegoCorriendo = false;
            nroNivel += 1;
        }

        if((int)cronoNivel2 == 180 && nroNivel == 2){
            gameOver = true;
        }

        if(gameOver){
            if (puntaje > puntajeMaximo){
                puntajeMaximo = puntaje;
            }
        }

    }

    public void gameDraw(Graphics2D g) {

        int width = this.getWidth(); // Ancho de la ventana
        int height = this.getHeight(); // Altura de la ventana
        int x = (int) (0.02 * width); // Posición x relativa al 2% del ancho de la ventana
        int y = (int) (0.07 * height); // Posición y relativa al 7% de la altura de la ventana
        FontMetrics metrics = g.getFontMetrics(fuente);
        g.setColor(Color.white);
        g.setFont(fuente);

        //Incio juego
        String textoPresentacion = "1943: The Battle of Midway";
        String textoInicar = "Tecla Enter o C para iniciar";
        int xTextoPresentacion = (width - metrics.stringWidth(textoPresentacion)) / 2;
        int yTextoPresentacion = (height / 2)-50;
        int xTextoInicar = (width - metrics.stringWidth(textoInicar)) / 2;
        int yTextoInicar = height / 2;

        //Pausa
        String textoPausa = "Pausa";
        int xTextoPausa = (width - metrics.stringWidth(textoPausa)) / 2;
        int yTextoPausa = height / 2;

        //Transicion
        String textoTransicion= "Mision cumplida! Nivel 1 superado";
        String textoContinuar= "Tecla Enter o C para continuar";
        int xTextoTransicion = (width - metrics.stringWidth(textoTransicion)) / 2;
        int yTextoTransicion = (height / 2)-50;
        int xTextoContinuar = (width - metrics.stringWidth(textoContinuar)) / 2;
        int yTextoContinuar = height / 2;

        //Gameover
        String textoGameOver = "GAME OVER";
        String textoPuntaje = "Puntaje final: " + puntaje;
        String textoRecord = "Record: " + puntajeMaximo;
        String textoReiniciar = "Tecla Enter o C para jugar de nuevo";

        int xTextoGameOver = (width - metrics.stringWidth(textoGameOver)) / 2;
        int yTextoGameOver = (height / 2)-60;
        int xTextoPuntaje = (width - metrics.stringWidth(textoPuntaje)) / 2;
        int yTextoPuntaje = (height / 2)-30;
        int xTextoRecord = (width - metrics.stringWidth(textoRecord)) / 2;
        int yTextoRecord = (height / 2);
        int xTextoReiniciar = (width - metrics.stringWidth(textoReiniciar)) / 2;
        int yTextoReiniciar = (height / 2)+30;

        dAhora = new Date( );
        long dateDiff = dAhora.getTime() - dInit.getTime();
        long diffSeconds = dateDiff / 1000 % 60;
        long diffMinutes = dateDiff / (60 * 1000) % 60;

        //La seccion que dibuja los objetos graficos
        if(!transicion){
            fondo.draw(g);

            for(Bonus bonus : bonus)
                bonus.draw(g);

            for (Barco barco : barcos) {
                barco.draw(g);

                for(ArmaBarco arma : barco.getArmas())
                    arma.draw(g);
            }

            for (GrupoAvionesRojos grupo : avionesrojos)
                for (AvionRojo avion : grupo.getAviones())
                    avion.draw(g);

            for (GrupoAvionesHostiles grupo : avioneshostiles)
                for (AvionHostil avion : grupo.getAviones())
                    avion.draw(g);

            for(Municion municion : municionesHostiles)
                municion.draw(g);

            for(Municion municion: municionesAliadas)
                municion.draw(g);

            for(Municion municion: municionesP38)
                municion.draw(g);

        }

        if(!gameOver){
            if(!transicion){
                if(heroe.getRefuerzo1() != null)
                    heroe.getRefuerzo1().draw(g);
                if(heroe.getRefuerzo2() != null)
                    heroe.getRefuerzo2().draw(g);
                heroe.draw(g);
            }
        }

        //seccion que dibuja la interfaz
        //interfaz inicio o pausa
        if (!juegoCorriendo){
            if(inicioJuego){
                g.drawString(textoPresentacion, xTextoPresentacion, yTextoPresentacion);
                g.drawString(textoInicar, xTextoInicar, yTextoInicar);
            } else if(!transicion){
                g.drawString(textoPausa, xTextoPausa, yTextoPausa);
            } else {
                g.drawString(textoTransicion, xTextoTransicion, yTextoTransicion);
                g.drawString(textoContinuar, xTextoContinuar, yTextoContinuar);
            }
        }
        //interfaz gameover
        if(gameOver){
            g.drawString(textoGameOver, xTextoGameOver, yTextoGameOver);
            g.drawString(textoPuntaje, xTextoPuntaje, yTextoPuntaje);
            g.drawString(textoRecord, xTextoRecord, yTextoRecord);
            g.drawString(textoReiniciar, xTextoReiniciar, yTextoReiniciar);
        }
        //interfaz juego
        g.drawString("Tiempo de Juego: " + diffMinutes + ":" + diffSeconds, x, y + (int) (0.01 * height));
        g.drawString("Nivel 1: " + (int)cronoNivel1, x, y + (int) (0.05 * height));
        g.drawString("Nivel 2: " + (int)cronoNivel2, x, y + (int) (0.09 * height));
        g.drawString("Energia P38: " + heroe.getEnergia(), x, y + (int) (0.13 * height));
        if(!gameOver){
            g.drawString("Puntaje: " + puntaje,  x + (int) (0.75 * width), y + (int) (0.01 * height));
        }
    }

    public void cargarImagenes(){
        System.out.println("Cargando imágenes...");
        try {
            Utilidades.setImagenBarco(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/barco.png"))));
            Utilidades.setImagenNivel(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/mapa1.jpg"))));
            Utilidades.setImagenP38(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/p38.png"))));
            Utilidades.setImagenP38(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/p38izq.png"))));
            Utilidades.setImagenP38(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/p38der.png"))));
            Utilidades.setImagenAvionHostil(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionhostil.png"))));
            Utilidades.setImagenAvionHostil(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionhostil2.png"))));
            Utilidades.setImagenAvionHostil(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionhostil3.png"))));
            Utilidades.setImagenAvionHostil(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionhostil4.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoizq.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoabizq.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoab.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoabder.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoder.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoarder.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoar.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoarizq.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/pow.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/ametralladora.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/auto.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/escopeta.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/estrellaNinja.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/laser.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/refuerzos.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/superShell.png"))));
            Utilidades.setImagenMunicion(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/municionBase.png"))));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.println("Imágenes cargadas");
    }

    public void actualizarObjetos(){

        heroe.moverse(getWidth(), getHeight());
        heroe.getArma().getDelayDisparo().update();
        heroe.getTiempoBonus().update();
        heroe.chequearBonus();

        //chequear que el jugador no haya muerto
        if(heroe.getEnergia() <= 0){
            gameOver = true;
            System.out.println("GameOver");
        }

        AvionRefuerzo ref1 = heroe.getRefuerzo1();
        AvionRefuerzo ref2 = heroe.getRefuerzo2();

        if(ref1 != null) {
            if(ref1.getArma().puedeDisparar())
                ref1.getArma().disparar(municionesAliadas, (int)(ref1.getX()+ref1.getWidth()/2-4), (int)ref1.getY());

            if(ref1.getVida() <= 0) {
                ref1.destruir();
                heroe.setRefuerzo1(null);
            }
        }

        if(ref2 != null) {
            if (ref2.getArma().puedeDisparar())
                ref2.getArma().disparar(municionesAliadas, (int) (ref2.getX() + ref2.getWidth() / 2 - 4), (int) ref2.getY());

            if(ref2.getVida() <= 0) {
                ref2.destruir();
                heroe.setRefuerzo2(null);
            }
        }

        for(Municion municion : municionesP38)
            municion.moverse(getWidth(), getHeight());

        for(Municion municion : municionesAliadas)
            municion.moverse(getWidth(), getHeight());

        for(Municion municion : municionesHostiles)
            municion.moverse(getWidth(), getHeight());

        for (GrupoAvionesHostiles grupo : avioneshostiles)
            if(grupo.getActualizar()) {
                for (AvionHostil avion : grupo.getAviones())
                    if (avion.getActualizar()) {

                        avion.moverse(getWidth(), getHeight());

                        avion.getArma().getDelayDisparo().update();

                        if(!avion.getVolviendo() && avion.getArma().puedeDisparar())
                            avion.getArma().disparar(municionesHostiles, (int)(avion.getX()+avion.getWidth()/2-4), (int)avion.getY());

                        if(avion.getVida() <= 0) {
                            avion.destruir();
                            puntaje += avion.getPuntaje();
                        }
                    }

                grupo.setEstado();

                if(grupo.todosDestruidos())
                    puntaje += grupo.getPuntaje();
            }

        for(GrupoAvionesRojos grupo : avionesrojos)
            if(grupo.getActualizar()) {
                for (AvionRojo avion : grupo.getAviones()) {
                    if(avion.getActualizar()) {

                        avion.moverse(getWidth(), getHeight());

                        if (avion.getVida() <= 0) {
                            grupo.setUltimoDestruidoX(avion.getX());
                            grupo.setUltimoDestruidoY(avion.getY());
                            avion.destruir();
                            puntaje += avion.getPuntaje();
                        }
                    }
                }

                grupo.setEstado();

                if(grupo.todosDestruidos()) {
                    bonus.add(Bonus.crearBonus((int)grupo.getUltimoDestruidoX(),(int)grupo.getUltimoDestruidoY()));
                    puntaje += grupo.getPuntaje();
                }
            }

        for(Barco barco : barcos)
            if(barco.getActualizar()) {
                barco.moverse(getWidth(), getHeight());

                for(ArmaBarco arma : barco.getArmas()) {
                    if(arma.getVida() <= 0)
                        arma.destruir();

                    if (arma.getActualizar() && arma.puedeDisparar())
                        arma.disparar(municionesHostiles, (int) (arma.getX()), (int) arma.getY());
                }

            }

        for(Bonus bonus : bonus)
            if(bonus.getActualizar())
                bonus.moverse(getWidth(), getHeight());
    }

    private void chequearColisiones() {

        for (GrupoAvionesRojos grupo : avionesrojos)
            for (AvionRojo avion : grupo.getAviones()) {
                if (avion.getActualizar()) {
                    if (heroe.intersects(avion)) {
                        avion.setVida(0);
                        heroe.setEnergia(-10);
                    }

                    for (Municion municion : municionesP38)
                        if(municion.getActualizar())
                            if (municion.intersects(avion)) {
                                avion.setVida(avion.getVida() - municion.getPoder());
                                municion.destruir();
                            }

                    for (Municion municion : municionesAliadas)
                        if(municion.getActualizar())
                            if (municion.intersects(avion)) {
                                municion.destruir();
                                avion.setVida(avion.getVida() - municion.getPoder());
                            }

                    AvionRefuerzo ref1 = heroe.getRefuerzo1(), ref2 = heroe.getRefuerzo2();

                    if(ref1 != null)
                        if(avion.intersects(ref1)){
                            avion.setVida(0);
                            ref1.setVida(ref1.getVida()-50);
                        }

                    if(ref2 != null)
                        if(avion.intersects(ref2)){
                            avion.setVida(0);
                            ref2.setVida(ref2.getVida()-50);
                        }
                }
            }

        for (GrupoAvionesHostiles grupo : avioneshostiles)
            for (AvionHostil avion : grupo.getAviones()) {
                if (avion.getActualizar()) {
                    if (heroe.intersects(avion)) {
                        avion.setVida(0);
                        heroe.setEnergia(-20);
                    }

                    for (Municion municion : municionesP38)
                        if(municion.getActualizar())
                            if (municion.intersects(avion)) {
                                municion.destruir();
                                avion.setVida(avion.getVida() - municion.getPoder());
                            }

                    for (Municion municion : municionesAliadas)
                        if(municion.getActualizar())
                            if (municion.intersects(avion)) {
                                municion.destruir();
                                avion.setVida(avion.getVida() - municion.getPoder());
                            }

                    AvionRefuerzo ref1 = heroe.getRefuerzo1(), ref2 = heroe.getRefuerzo2();

                    if(ref1 != null)
                        if(avion.intersects(ref1)){
                            avion.setVida(0);
                            ref1.setVida(ref1.getVida()-20);
                        }

                    if(ref2 != null)
                        if(avion.intersects(ref2)){
                            avion.setVida(0);
                            ref2.setVida(ref2.getVida()-20);
                        }

                }
            }

        for(Barco barco : barcos)
            for(ArmaBarco arma : barco.getArmas()) {
                if (arma.getActualizar()) {
                    /*if (heroe.intersects(arma)) {
                        arma.setVida(0);
                        heroe.setEnergia(-20);
                    }*/

                    for (Municion municion : municionesP38)
                        if (municion.getActualizar())
                            if (municion.intersects(arma)) {
                                municion.destruir();
                                arma.setVida(arma.getVida() - municion.getPoder());
                            }

                    for (Municion municion : municionesAliadas)
                        if (municion.getActualizar())
                            if (municion.intersects(arma)) {
                                municion.destruir();
                                arma.setVida(arma.getVida() - municion.getPoder());
                            }

                    AvionRefuerzo ref1 = heroe.getRefuerzo1(), ref2 = heroe.getRefuerzo2();

                    if (ref1 != null)
                        if (arma.intersects(ref1)) {
                            arma.setVida(0);
                            ref1.setVida(ref1.getVida() - 20);
                        }

                    if (ref2 != null)
                        if (arma.intersects(ref2)) {
                            arma.setVida(0);
                            ref2.setVida(ref2.getVida() - 20);
                        }

                }
            }


        for(Municion municion : municionesHostiles)
            if(municion.getActualizar()) {
                if (municion.intersects(heroe)) {
                    heroe.setEnergia(-municion.getPoder());
                    municion.destruir();
                }

                AvionRefuerzo ref1 = heroe.getRefuerzo1(), ref2 = heroe.getRefuerzo2();

                if(ref1 != null)
                    if(municion.intersects(ref1)){
                        municion.destruir();
                        ref1.setVida(ref1.getVida()-municion.getPoder());
                    }

                if(ref2 != null)
                    if(municion.intersects(ref2)){
                        municion.destruir();
                        ref2.setVida(ref2.getVida()-municion.getPoder());
                    }
            }

        for(Municion municion : municionesP38) {

            if (municion.getActualizar()) {
                Rectangle rango = heroe.getRango();

                if (rango != null)
                    if(!municion.intersects(rango))
                        municion.destruir();

                if(heroe.getArma() instanceof Escopeta)
                    for(Municion munienemiga : municionesHostiles)
                        if(munienemiga.actualizar)
                            if(municion.intersects(munienemiga)){
                                municion.destruir();
                                munienemiga.destruir();
                            }



                Bonus nuevo = null;
                boolean cambio = false;

                for (Bonus b : bonus)
                        if (b.getActualizar()) {
                            if (municion.intersects(b)) {
                                b.setY((int) b.getY() - 5);
                                b.setGolpesRecibidos((short) 1);
                                municion.destruir();
                            }

                            if (b.cambiar()) {
                                nuevo = Bonus.crearBonus((int) b.getX(), (int) b.getY());
                                cambio = true;
                                b.destruir();
                            }
                        }

                if(cambio)
                    bonus.add(nuevo);
            }

        }

        for(Bonus b : bonus)
            if(b.getActualizar())
                if(b.intersects(heroe))
                    b.ejecutarAccion(heroe);
    }

    public void chequearTeclas() {

        Keyboard keyboard = this.getKeyboard();
        heroe.setImagen(Utilidades.getImagenP38(0));

        if(juegoCorriendo){
            // Procesar teclas de direccion
            if(teclaMovArriba.equals("W")){
                if (keyboard.isKeyPressed(KeyEvent.VK_W)) {
                    heroe.setY((int)heroe.getY()-4);
                    heroe.setImagen(Utilidades.getImagenP38(0));
                }
            } else {
                if (keyboard.isKeyPressed(KeyEvent.VK_UP)) {
                    heroe.setY((int)heroe.getY()-4);
                    heroe.setImagen(Utilidades.getImagenP38(0));
                }
            }

            if(teclaMovAbajo.equals("S")){
                if(keyboard.isKeyPressed(KeyEvent.VK_S)) {
                    heroe.setY((int)heroe.getY()+4);
                    heroe.setImagen(Utilidades.getImagenP38(0));
                }
            } else {
                if(keyboard.isKeyPressed(KeyEvent.VK_DOWN)) {
                    heroe.setY((int)heroe.getY()+4);
                    heroe.setImagen(Utilidades.getImagenP38(0));
                }
            }

            if(teclaMovIzq.equals("A")){
                if (keyboard.isKeyPressed(KeyEvent.VK_A)) {
                    heroe.setX((int)heroe.getX()-4);
                    heroe.setImagen(Utilidades.getImagenP38(1));
                }
            } else {
                if (keyboard.isKeyPressed(KeyEvent.VK_LEFT)) {
                    heroe.setX((int)heroe.getX()-4);
                    heroe.setImagen(Utilidades.getImagenP38(1));
                }
            }

            if(teclaMovDer.equals("D")){
                if (keyboard.isKeyPressed(KeyEvent.VK_D)) {
                    heroe.setX((int)heroe.getX()+4);
                    heroe.setImagen(Utilidades.getImagenP38(2));
                }
            } else {
                if (keyboard.isKeyPressed(KeyEvent.VK_RIGHT)) {
                    heroe.setX((int)heroe.getX()+4);
                    heroe.setImagen(Utilidades.getImagenP38(2));
                }
            }

            //disparar
            if(teclaDisparar.equals("Barra espaciadora")){
                if (keyboard.isKeyPressed(KeyEvent.VK_SPACE)) {
                    if(heroe.getArma().puedeDisparar())
                        heroe.getArma().disparar(municionesP38,(int)(heroe.getX()+heroe.getWidth()/2-4),(int)heroe.getY());
                }
            } else {
                if (keyboard.isKeyPressed(KeyEvent.VK_X)) {
                    if(heroe.getArma().puedeDisparar())
                        heroe.getArma().disparar(municionesP38,(int)(heroe.getX()+heroe.getWidth()/2-4),(int)heroe.getY());
                }
            }

            //Ataque especial
            if(teclaAtqEsp.equals("B")){
                if (keyboard.isKeyPressed(KeyEvent.VK_B)) {
                    //lanza ataque especial
                }
            } else {
                if (keyboard.isKeyPressed(KeyEvent.VK_Z)) {
                    //lanza ataque especial
                }
            }
        }

        // Activar/desactivar efectos de sonido
        if(teclaActDesSonido.equals("O")){
            if (keyboard.isKeyPressed(KeyEvent.VK_O)) {
                //activa desactiva los efectos de sonido
            }
        } else {
            if (keyboard.isKeyPressed(KeyEvent.VK_Q)) {
                //activa desactiva los efectos de sonido
            }
        }

        // Activar/desactivar musica
        if(teclaActDesMusica.equals("I")){
            if (keyboard.isKeyPressed(KeyEvent.VK_I)) {
                //activa desactiva la musica
            }
        } else {
            if (keyboard.isKeyPressed(KeyEvent.VK_W)) {
                //activa desactiva la musica
            }
        }

        // Declara una variable booleana para seguir el estado de la tecla
        boolean teclaPresionada = false;

        // Pausar el juego
        if (teclaPausar.equals("P")) {
            if (keyboard.isKeyPressed(KeyEvent.VK_P) && !inicioJuego && !teclaPresionada) {
                juegoCorriendo = !juegoCorriendo;
                teclaPresionada = true;  // Marcar la tecla como presionada
                try {
                    Thread.sleep(100);  // Agregar un retraso de 100 milisegundos
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else if (!keyboard.isKeyPressed(KeyEvent.VK_P)) {
                teclaPresionada = false;  // Restablecer la tecla presionada cuando se suelta
            }
        } else {
            if (keyboard.isKeyPressed(KeyEvent.VK_SPACE) && !inicioJuego && !teclaPresionada) {
                juegoCorriendo = !juegoCorriendo;
                teclaPresionada = true;  // Marcar la tecla como presionada
                try {
                    Thread.sleep(100);  // Agregar un retraso de 100 milisegundos
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            } else if (!keyboard.isKeyPressed(KeyEvent.VK_SPACE)) {
                teclaPresionada = false;  // Restablecer la tecla presionada cuando se suelta
            }
        }


        // Iniciar el juego (Revisar si está bien resuelto)
        if(teclaIniciar.equals("C")){
            if (keyboard.isKeyPressed(KeyEvent.VK_C) && inicioJuego) {
                juegoCorriendo = !juegoCorriendo;
                inicioJuego = false;
            }
            if (keyboard.isKeyPressed(KeyEvent.VK_C) && transicion) {
                transicion = false;
                juegoCorriendo = true;
            }
            if (keyboard.isKeyPressed(KeyEvent.VK_C) && gameOver) {
                gameOver = false;
                inicioJuego = true;
                juegoCorriendo = false;
                cronoNivel1 = 0;
                cronoNivel2 = 0;
                nroNivel = 1;
                run(1.0 / 60.0);
            }
        } else {
            if (keyboard.isKeyPressed(KeyEvent.VK_ENTER) && inicioJuego) {
                juegoCorriendo = !juegoCorriendo;
                inicioJuego = false;
            }
            if (keyboard.isKeyPressed(KeyEvent.VK_ENTER) && transicion) {
                transicion = false;
                juegoCorriendo = true;
            }
            if (keyboard.isKeyPressed(KeyEvent.VK_ENTER) && gameOver) {
                gameOver = false;
                inicioJuego = true;
                juegoCorriendo = false;
                cronoNivel1 = 0;
                cronoNivel2 = 0;
                nroNivel = 1;
                run(1.0 / 60.0);
            }
        }

        // Cerrar juego
        if (keyboard.isKeyPressed(KeyEvent.VK_ESCAPE)) {
            this.stop();
        }
    }

    //metodos para manejar el puntaje
    public void aumentarPuntuacion(int puntos) {
        puntaje += puntos;
    }

    public int getPuntaje() {
        return puntaje;
    }

    public int getPuntajeMaximo() {
        return puntajeMaximo;
    }

    public void gameShutdown() {
       Log.info(getClass().getSimpleName(), "Cerrando el juego");
    }
}
