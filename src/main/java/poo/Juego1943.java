/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package poo;


import com.entropyinteractive.*;  //jgame
import poo.Enemigos.*;

import java.awt.*;
import java.awt.event.*; //eventos

import java.awt.image.*;  //imagenes
import javax.imageio.*; //imagenes

import java.awt.Graphics2D;

import java.util.LinkedList;

import java.util.*;
import java.text.*;

 


public class Juego1943 extends JGame {

	Date dInit = new Date();
	Date dAhora;
	SimpleDateFormat ft = new SimpleDateFormat ("mm:ss");
	final double NAVE_DESPLAZAMIENTO=150.0;

    BufferedImage img_fondo = null;

    Vector<GrupoAvionesHostiles> avioneshostiles;
    Vector<GrupoAvionesRojos> avionesrojos;
    P38 heroe;

    public Juego1943() {

        super("1943: The Battle of Midway", 800, 600);
        avioneshostiles = new Vector<GrupoAvionesHostiles>();
        avioneshostiles.add(new GrupoAvionesHostilesFormacion1(getHeight()));
        avioneshostiles.add(new GrupoAvionesHostilesFormacion2(getHeight()));
        avioneshostiles.add(new GrupoAvionesHostilesFormacion3(getHeight()));
        avionesrojos = new Vector<GrupoAvionesRojos>();
        avionesrojos.add(new GrupoAvionesRojos(getHeight()));
        heroe = new P38();
        //System.out.println(appProperties.stringPropertyNames());
    }

    public void gameStartup() {
		System.out.println("gameStartup");
        try{
			img_fondo= ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/fondojuego.jpg"));
            heroe.setPosicion(getWidth() / 2,getHeight() / 2 );
        }
        catch(Exception e){
			System.out.println(e);
        }
       
    }

    public void gameUpdate(double delta) {
        Keyboard keyboard = this.getKeyboard();

        // Procesar teclas de direccion
        if (keyboard.isKeyPressed(KeyEvent.VK_UP)) {
            heroe.setY(heroe.getY() - NAVE_DESPLAZAMIENTO * delta);
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_DOWN)) {
            heroe.setY(heroe.getY() + NAVE_DESPLAZAMIENTO * delta);
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_LEFT)) {
            heroe.setX(heroe.getX() - NAVE_DESPLAZAMIENTO * delta);
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_RIGHT)) {
            heroe.setX(heroe.getX() + NAVE_DESPLAZAMIENTO * delta);
        }

        // Esc fin del juego
        LinkedList<KeyEvent> keyEvents = keyboard.getEvents();
        for (KeyEvent event : keyEvents) {
            if ((event.getID() == KeyEvent.KEY_PRESSED) &&
                    (event.getKeyCode() == KeyEvent.VK_ESCAPE)) {
                stop();
            }
        }

        heroe.moverse(getWidth(), getHeight());
        for (GrupoAvionesHostiles grupo : avioneshostiles)
            for(AvionHostil avion: grupo.getAviones())
                avion.moverse(getWidth(), getHeight());

        for(GrupoAvionesRojos grupo : avionesrojos)
            for (AvionRojo avion : grupo.getAviones())
                avion.moverse(getWidth(), getHeight());
    }

    public void gameDraw(Graphics2D g) {

    	dAhora= new Date( );
    	long dateDiff = dAhora.getTime() - dInit.getTime();
    	long diffSeconds = dateDiff / 1000 % 60;
		long diffMinutes = dateDiff / (60 * 1000) % 60;

        g.drawImage(img_fondo,0,0,null);// imagen de fondo

        g.setColor(Color.black);
        g.drawString("Tiempo de Juego: "+diffMinutes+":"+diffSeconds,12,42);
        g.drawString("Tecla ESC = Fin del Juego ",592,42);

    	g.setColor(Color.white);
    	g.drawString("Tiempo de Juego: "+diffMinutes+":"+diffSeconds,10,40);
		g.drawString("Tecla ESC = Fin del Juego ",590,40);
        
        heroe.draw(g);
        for(GrupoAvionesHostiles grupo: avioneshostiles)
            for(AvionHostil avion : grupo.getAviones())
                avion.draw(g);
        for(GrupoAvionesRojos grupo : avionesrojos)
            for (AvionRojo avion : grupo.getAviones())
                avion.draw(g);
    }

    public void gameShutdown() {
       Log.info(getClass().getSimpleName(), "Shutting down game");
    }
}