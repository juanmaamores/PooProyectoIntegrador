/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package poo;


import com.entropyinteractive.*;  //jgame
import poo.Enemigos.*;

import java.awt.*;
import java.awt.event.*; //eventos

import java.awt.image.*;  //imagenes
import javax.imageio.*; //imagenes

import java.awt.Graphics2D;

import java.util.LinkedList;

import java.util.*;
import java.text.*;




public class Juego1943 extends JGame {

    Date dInit = new Date();
    Date dAhora;
    SimpleDateFormat ft = new SimpleDateFormat("mm:ss");
    final double NAVE_DESPLAZAMIENTO = 200.0;

    //BufferedImage img_fondo = null;

    Fondo fondo;
    Vector<GrupoAvionesHostiles> avioneshostiles;
    Vector<GrupoAvionesRojos> avionesrojos;
    Vector<Barco> barcos;
    P38 heroe;
    public Juego1943() {

        super("1943: The Battle of Midway", 800, 600);
        //System.out.println(appProperties.stringPropertyNames());
    }

    public void gameStartup() {
        System.out.println("Iniciando 1943: The Battle of Midway");
        cargarImagenes();
        fondo = new Fondo(Utilidades.getImagenNivel(0));
        fondo.setPosicion(8,-(int)fondo.getHeight()+getHeight());
        avioneshostiles = new Vector<>();
        avioneshostiles.add(new GrupoAvionesHostilesFormacion1(getHeight()));
        avioneshostiles.add(new GrupoAvionesHostilesFormacion2(getHeight()));
        avioneshostiles.add(new GrupoAvionesHostilesFormacion3(getHeight()));
        avionesrojos = new Vector<>();
        avionesrojos.add(new GrupoAvionesRojos(getHeight()));
        barcos = new Vector<>();
        barcos.add(new Barco(70, -100));
        heroe = new P38();
        heroe.setPosicion(getWidth() / 2, getHeight() / 2);
    }

    public void gameUpdate(double delta) {

        chequearTeclas(delta);

        actualizarObjetos();

        chequearColisiones();

        fondo.setY((int)fondo.getY()+1);
    }

    public void gameDraw(Graphics2D g) {

        dAhora = new Date();
        long dateDiff = dAhora.getTime() - dInit.getTime();
        long diffSeconds = dateDiff / 1000 % 60;
        long diffMinutes = dateDiff / (60 * 1000) % 60;

        //g.drawImage(img_fondo, 0, 0, null);// imagen de fondo

        g.setColor(Color.black);
        g.drawString("Tiempo de Juego: " + diffMinutes + ":" + diffSeconds, 12, 42);
        g.drawString("Tecla ESC = Fin del Juego ", 592, 42);

        g.setColor(Color.white);
        g.drawString("Tiempo de Juego: " + diffMinutes + ":" + diffSeconds, 10, 40);
        g.drawString("Tecla ESC = Fin del Juego ", 590, 40);

        fondo.draw(g);

        for (Barco barco : barcos)
            barco.draw(g);

        for (GrupoAvionesRojos grupo : avionesrojos)
            for (AvionRojo avion : grupo.getAviones())
                avion.draw(g);

        for (GrupoAvionesHostiles grupo : avioneshostiles)
            for (AvionHostil avion : grupo.getAviones())
                avion.draw(g);

        heroe.draw(g);
    }

    public void gameShutdown() {
        Log.info(getClass().getSimpleName(), "Shutting down game");
    }

    public void chequearTeclas(double delta) {
        Keyboard keyboard = this.getKeyboard();

        heroe.setImagen(Utilidades.getImagenP38(0));

        // Procesar teclas de direccion
        if (keyboard.isKeyPressed(KeyEvent.VK_UP)) {
            heroe.setY((int) (heroe.getY() - NAVE_DESPLAZAMIENTO * delta));
            heroe.setImagen(Utilidades.getImagenP38(0));
        }

        if(keyboard.isKeyPressed(KeyEvent.VK_DOWN)) {
            heroe.setY((int) (heroe.getY() + NAVE_DESPLAZAMIENTO * delta));
            heroe.setImagen(Utilidades.getImagenP38(0));
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_LEFT)) {
            heroe.setX((int) (heroe.getX() - NAVE_DESPLAZAMIENTO * delta));
            heroe.setImagen(Utilidades.getImagenP38(1));
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_RIGHT)) {
            heroe.setX((int) (heroe.getX() + NAVE_DESPLAZAMIENTO * delta));
            heroe.setImagen(Utilidades.getImagenP38(2));
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_X)) {
            //disparar
        }

        // Esc fin del juego
        LinkedList<KeyEvent> keyEvents = keyboard.getEvents();
        for (KeyEvent event : keyEvents) {
            if ((event.getID() == KeyEvent.KEY_PRESSED) &&
                    (event.getKeyCode() == KeyEvent.VK_ESCAPE)) {
                stop();
            }
        }
    }

    public void cargarImagenes(){
        System.out.println("Cargando imágenes...");
        try {
            Utilidades.setImagenNivel(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/mapa1.jpg")));
            Utilidades.setImagenP38(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/p38.png")));
            Utilidades.setImagenP38(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/p38izq.png")));
            Utilidades.setImagenP38(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/p38der.png")));
            Utilidades.setImagenAvionHostil(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionhostil.png")));
            Utilidades.setImagenAvionHostil(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionhostil2.png")));
            Utilidades.setImagenAvionHostil(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionhostil3.png")));
            Utilidades.setImagenAvionHostil(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionhostil4.png")));
            Utilidades.setImagenAvionRojo(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionrojoizq.png")));
            Utilidades.setImagenAvionRojo(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionrojoabizq.png")));
            Utilidades.setImagenAvionRojo(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionrojoab.png")));
            Utilidades.setImagenAvionRojo(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionrojoabder.png")));
            Utilidades.setImagenAvionRojo(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionrojoder.png")));
            Utilidades.setImagenAvionRojo(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionrojoarder.png")));
            Utilidades.setImagenAvionRojo(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionrojoar.png")));
            Utilidades.setImagenAvionRojo(ImageIO.read(getClass().getClassLoader().getResourceAsStream("img/avionrojoarizq.png")));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.println("Imágenes cargadas");
    }

    public void actualizarObjetos(){

        heroe.moverse(getWidth(), getHeight());

        for (GrupoAvionesHostiles grupo : avioneshostiles)
            if(grupo.getActualizar()) {
                for (AvionHostil avion : grupo.getAviones())
                    if (!avion.escapo() || !avion.estaMuerto())
                        avion.moverse(getWidth(), getHeight());

                grupo.setEstado();
            }

        for(GrupoAvionesRojos grupo : avionesrojos)
            if(grupo.getActualizar()) {
                for (AvionRojo avion : grupo.getAviones())
                    avion.moverse(getWidth(), getHeight());

                if(grupo.todosDestruidos()) {
                    //System.out.println("Bonus");
                    //System.out.println("Bonus en x:"+grupo.getUltimoDestruidoX()+" y: "+grupo.getUltimoDestruidoY());
                    //generar bonus
                }

                grupo.setEstado();
            }

        for(Barco barco : barcos)
            if(!barco.estaMuerto()||!barco.escapo())
                barco.moverse(getWidth(), getHeight());
    }

    public void chequearColisiones(){

        for(GrupoAvionesRojos grupo : avionesrojos)
            for (AvionRojo avion : grupo.getAviones())
                if(heroe.intersects(avion)) {
                    grupo.setUltimoDestruidoX(avion.getX());
                    grupo.setUltimoDestruidoY(avion.getY());
                    avion.destruir();
                    //heroe.setEnergia(X);
                }
    }
}