/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package poo;
import com.entropyinteractive.*;  //jgame
import poo.Bonus.POW;
import java.awt.*;
import java.awt.event.*; //eventos
import java.awt.image.*;  //imagenes
import javax.imageio.*; //imagenes
import java.awt.Graphics2D;
import java.util.LinkedList;
import java.util.*;
import java.text.*;

public class Juego1943 extends JGame {

	Date dInit = new Date();
	Date dAhora;
	SimpleDateFormat ft = new SimpleDateFormat ("mm:ss");
	final double NAVE_DESPLAZAMIENTO=150.0;
    BufferedImage img_fondo = null;
    private static ArrayList<ObjetoGrafico> objetosGraficos = new ArrayList<ObjetoGrafico>();
    P38 heroe = new P38();
    POW testPow = new POW();

    public Juego1943() {
        super("1943: The Battle of Midway", 800, 600);
        //System.out.println(appProperties.stringPropertyNames());
    }

    public void gameStartup() {
		System.out.println("gameStartup");
        try{
			img_fondo= ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/fondojuegoTest.jpg")));
            heroe.setImagen(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/p38.png"))));
            testPow.setImagen(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/pow.png"))));
            heroe.setPosicion((int) getWidth() / 2, (int) getHeight() / 2 );
            testPow.setPosicion((int) getWidth() / 2, (int) getHeight() / 2 - 100);
            objetosGraficos.add(heroe);
            objetosGraficos.add(testPow);
        }
        catch(Exception e){
			System.out.println(e);
        }
       
    }

public void gameUpdate(double delta) {

        Keyboard keyboard = this.getKeyboard();

        // Procesar teclas de direccion
        if (keyboard.isKeyPressed(KeyEvent.VK_UP)){
            heroe.setY( heroe.getY() - NAVE_DESPLAZAMIENTO * delta);
            //shipY -= NAVE_DESPLAZAMIENTO * delta;
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_DOWN)){
            //shipY += NAVE_DESPLAZAMIENTO * delta;
            heroe.setY( heroe.getY() + NAVE_DESPLAZAMIENTO * delta);
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_LEFT)){
            ///shipX -= NAVE_DESPLAZAMIENTO * delta;
            heroe.setX( heroe.getX() - NAVE_DESPLAZAMIENTO * delta);
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_RIGHT)){
            //shipX += NAVE_DESPLAZAMIENTO * delta;
            heroe.setX( heroe.getX() + NAVE_DESPLAZAMIENTO * delta);
        }
         

        // Esc fin del juego
        LinkedList < KeyEvent > keyEvents = keyboard.getEvents();
        for (KeyEvent event: keyEvents) {
            if ((event.getID() == KeyEvent.KEY_PRESSED) &&
                (event.getKeyCode() == KeyEvent.VK_ESCAPE)) {
                stop();
            }
        }

        testPow.moverse();

        for(int i = 0; i < objetosGraficos.size(); i++) {
            ObjetoGrafico mo = objetosGraficos.get(i);
            mo.update(delta);
        }

    }

    public void gameDraw(Graphics2D g) {

    	dAhora= new Date( );
    	long dateDiff = dAhora.getTime() - dInit.getTime();
    	long diffSeconds = dateDiff / 1000 % 60;
		long diffMinutes = dateDiff / (60 * 1000) % 60;

        //interfaz
        g.drawImage(img_fondo,0,0,null);// imagen de fondo
        g.setColor(Color.black);
        g.drawString("Tiempo de Juego: "+diffMinutes+":"+diffSeconds,12,42);
        g.drawString("Tecla ESC = Fin del Juego ",592,42);
    	g.setColor(Color.white);
    	g.drawString("Tiempo de Juego: "+diffMinutes+":"+diffSeconds,10,40);
		g.drawString("Tecla ESC = Fin del Juego ",590,40);

        for(int i = 0; i < objetosGraficos.size(); i++)
            objetosGraficos.get(i).draw(g);

    }
    public static ArrayList<ObjetoGrafico> getObjetosGraficos() {
        return objetosGraficos;
    }

    public void gameShutdown() {
       Log.info(getClass().getSimpleName(), "Shutting down game");
    }
}