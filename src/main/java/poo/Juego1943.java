/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package poo;
import com.entropyinteractive.*;  //jgame
import poo.Bonus.*;
import poo.Enemigos.*;

import java.awt.*;
import java.awt.event.*; //eventos
import java.awt.image.*;  //imagenes
import javax.imageio.*; //imagenes
import java.awt.Graphics2D;
import java.text.SimpleDateFormat;
import java.util.LinkedList;
import java.util.*;
//import java.text.*;

public class Juego1943 extends JGame {

	Date dInit = new Date();
	Date dAhora;
    final double NAVE_DESPLAZAMIENTO=200.0;
    Fondo fondo;
    Vector<GrupoAvionesHostiles> avioneshostiles;
    Vector<GrupoAvionesRojos> avionesrojos;
    Vector<Barco> barcos;
    Vector<Bonus> bonus;
    Vector<Municion> municionesP38;
    P38 heroe;

    public Juego1943() {
        super("1943: The Battle of Midway", 800, 600);
        //System.out.println(appProperties.stringPropertyNames());
    }

    public void gameStartup() {
        System.out.println("Iniciando 1943: The Battle of Midway");
        cargarImagenes();
        fondo = new Fondo(Utilidades.getImagenNivel(0));
        fondo.setPosicion(8,-(int)fondo.getHeight()+getHeight());
        avioneshostiles = new Vector<>();
        avioneshostiles.add(new GrupoAvionesHostilesFormacion1(getHeight()));
        avioneshostiles.add(new GrupoAvionesHostilesFormacion2(getHeight()));
        avioneshostiles.add(new GrupoAvionesHostilesFormacion3(getHeight()));
        avionesrojos = new Vector<>();
        avionesrojos.add(new GrupoAvionesRojos(getHeight()));
        barcos = new Vector<>();
        barcos.add(new Barco(70, -100));
        bonus = new Vector<>();
        municionesP38 = new Vector<>();
        heroe = new P38();
        heroe.setPosicion(getWidth() / 2, getHeight() / 2);
    }

    public void gameUpdate(double delta) {

        chequearTeclas(delta);

        actualizarObjetos();

        chequearColisiones();

        fondo.setY((int)fondo.getY()+1);
    }

    public void gameDraw(Graphics2D g) {

    	dAhora= new Date( );
    	long dateDiff = dAhora.getTime() - dInit.getTime();
    	long diffSeconds = dateDiff / 1000 % 60;
		long diffMinutes = dateDiff / (60 * 1000) % 60;
        int width = this.getWidth(); // Ancho de la ventana
        int height = this.getHeight(); // Altura de la ventana
        int x = (int) (0.02 * width); // Posici칩n x relativa al 2% del ancho de la ventana
        int y = (int) (0.07 * height); // Posici칩n y relativa al 7% de la altura de la ventana

        fondo.draw(g);

        for(Bonus bonus : bonus)
            bonus.draw(g);

        for (Barco barco : barcos)
            barco.draw(g);

        for (GrupoAvionesRojos grupo : avionesrojos)
            for (AvionRojo avion : grupo.getAviones())
                avion.draw(g);

        for (GrupoAvionesHostiles grupo : avioneshostiles)
            for (AvionHostil avion : grupo.getAviones())
                avion.draw(g);

        heroe.draw(g);

        for(Municion municion: municionesP38)
            municion.draw(g);

        //interfaz
        g.setColor(Color.black);
        g.drawString("Tiempo de Juego: " + diffMinutes + ":" + diffSeconds, x, y + (int) (0.01 * height));
        g.drawString("Energia P38: " + heroe.getEnergia(), x, y + (int) (0.04 * height));
        g.drawString("Puntaje: " + 0,  x + (int) (0.75 * width), y + (int) (0.01 * height));
        g.drawString("Tecla ESC = Fin del Juego", x + (int) (0.75 * width), y + (int) (0.04 * height));
    }

    public void cargarImagenes(){
        System.out.println("Cargando im치genes...");
        try {
            Utilidades.setImagenNivel(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/mapa1.jpg"))));
            Utilidades.setImagenP38(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/p38.png"))));
            Utilidades.setImagenP38(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/p38izq.png"))));
            Utilidades.setImagenP38(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/p38der.png"))));
            Utilidades.setImagenAvionHostil(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionhostil.png"))));
            Utilidades.setImagenAvionHostil(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionhostil2.png"))));
            Utilidades.setImagenAvionHostil(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionhostil3.png"))));
            Utilidades.setImagenAvionHostil(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionhostil4.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoizq.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoabizq.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoab.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoabder.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoder.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoarder.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoar.png"))));
            Utilidades.setImagenAvionRojo(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/avionrojoarizq.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/pow.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/ametralladora.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/auto.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/escopeta.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/estrellaNinja.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/laser.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/refuerzos.png"))));
            Utilidades.setImagenBonus(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/superShell.png"))));
            Utilidades.setImagenMunicion(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("img/municionBase.png"))));
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.println("Im치genes cargadas");
    }

    public void actualizarObjetos(){

        heroe.moverse(getWidth(), getHeight());

        for(Municion municion : municionesP38)
            municion.moverse(getWidth(), getHeight());

        for (GrupoAvionesHostiles grupo : avioneshostiles)
            if(grupo.getActualizar()) {
                for (AvionHostil avion : grupo.getAviones())
                    if (!avion.escapo() || !avion.estaMuerto()) {
                        avion.moverse(getWidth(), getHeight());
                        if(avion.getVida() <= 0)
                            avion.destruir();
                    }

                grupo.setEstado();
            }

        for(GrupoAvionesRojos grupo : avionesrojos)
            if(grupo.getActualizar()) {
                for (AvionRojo avion : grupo.getAviones()) {
                    if(!avion.escapo() || !avion.estaMuerto()) {
                        avion.moverse(getWidth(), getHeight());
                        if (avion.getVida() <= 0) {
                            grupo.setUltimoDestruidoX(avion.getX());
                            grupo.setUltimoDestruidoY(avion.getY());
                            avion.destruir();
                        }
                    }
                }

                grupo.setEstado();

                if(grupo.todosDestruidos()) {
                    bonus.add(Bonus.crearBonus((int)grupo.getUltimoDestruidoX(),(int)grupo.getUltimoDestruidoY()));
                }
            }

        for(Barco barco : barcos)
            if(!barco.estaMuerto()||!barco.escapo())
                barco.moverse(getWidth(), getHeight());

        for(Bonus bonus : bonus)
            bonus.moverse(getWidth(), getHeight());
    }

    private void chequearColisiones() {

        for (GrupoAvionesRojos grupo : avionesrojos)
            for (AvionRojo avion : grupo.getAviones()) {
                if (avion.getActualizar()) {
                    if (heroe.intersects(avion)) {
                        avion.setVida(0);
                        heroe.setEnergia(-10);
                    }

                    for (Municion municion : municionesP38)
                        if (municion.intersects(avion)) {
                            avion.setVida(avion.getVida() - municion.getPoder());
                            municion.destruir();
                        }
                }
            }

        for (GrupoAvionesHostiles grupo : avioneshostiles)
            for (AvionHostil avion : grupo.getAviones()) {
                if (avion.getActualizar() && !avion.getVolviendo()) {
                    if (heroe.intersects(avion)) {
                        avion.setVida(0);
                        heroe.setEnergia(-10);
                    }

                    for (Municion municion : municionesP38)
                        if (municion.intersects(avion)) {
                            municion.destruir();
                            avion.setVida(avion.getVida() - municion.getPoder());
                        }
                }
            }
    }

    public void chequearTeclas(double delta) {
        Keyboard keyboard = this.getKeyboard();

        heroe.setImagen(Utilidades.getImagenP38(0));

        // Procesar teclas de direccion
        if (keyboard.isKeyPressed(KeyEvent.VK_UP)) {
            heroe.setY((int) (heroe.getY() - NAVE_DESPLAZAMIENTO * delta));
            heroe.setImagen(Utilidades.getImagenP38(0));
        }

        if(keyboard.isKeyPressed(KeyEvent.VK_DOWN)) {
            heroe.setY((int) (heroe.getY() + NAVE_DESPLAZAMIENTO * delta));
            heroe.setImagen(Utilidades.getImagenP38(0));
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_LEFT)) {
            heroe.setX((int) (heroe.getX() - NAVE_DESPLAZAMIENTO * delta));
            heroe.setImagen(Utilidades.getImagenP38(1));
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_RIGHT)) {
            heroe.setX((int) (heroe.getX() + NAVE_DESPLAZAMIENTO * delta));
            heroe.setImagen(Utilidades.getImagenP38(2));
        }

        if (keyboard.isKeyPressed(KeyEvent.VK_X)) {
            if(heroe.puedeDisparar())
                municionesP38.add(heroe.disparar());
        }

        // Esc fin del juego
        LinkedList<KeyEvent> keyEvents = keyboard.getEvents();
        for (KeyEvent event : keyEvents) {
            if ((event.getID() == KeyEvent.KEY_PRESSED) &&
                    (event.getKeyCode() == KeyEvent.VK_ESCAPE)) {
                stop();
            }
        }
    }

    public void gameShutdown() {
       Log.info(getClass().getSimpleName(), "Saliendo del juego");
    }
}
